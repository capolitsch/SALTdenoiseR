% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/break_spectrum.R
\name{break_spectrum}
\alias{break_spectrum}
\title{Break a spectrum into segments when one or more wide masks exist}
\usage{
break_spectrum(df_full, break_at = 10, min_pix_segment = 10)
}
\arguments{
\item{df_full}{A tibble that includes a column titled \code{"wavelength"} and one
or more columns with names ending in \code{"mask"}, e.g.
\code{c("I_mask", "Q_mask", "U_mask")}. The values of the mask columns are equal
to 0 (or FALSE) for unmasked pixels and nonzero (or TRUE) for masked pixels.}

\item{break_at}{The minimum number of consecutively-masked spectral pixels
that will trigger a break in the spectrum. Defaults to \code{break_at = 10}.}

\item{min_pix_segment}{After the segmentation procedure is complete, the
resulting segments are examined to ensure that each is sufficiently long for
a non-trivial/well-defined denoising analysis. In particular, any segment
that has less than \code{min_pix_segment} unmasked spectral pixels is discarded.
Defaults to \code{min_pix_segment = 10}.}
}
\value{
A list of tibbles that define the segmented spectrum. Each tibble in
the list has the same format as the input tibble \code{df_full}, minus the mask
columns.
}
\description{
Break a spectrum into segments when one or more wide masks (i.e.
sequences of many consecutively-masked pixels) exist. The spectrum can be
polarized or unpolarized (see examples). When the spectrum is polarized, the
set of masked spectral pixels used to define the spectrum's segmentation is
taken to be the set of pixels that are masked for \emph{any} of the \mjseqn{I},
\mjseqn{Q}, \mjseqn{U} Stokes parameters. Note that \code{\link[=denoise_spectrum]{denoise_spectrum()}}
calls \code{break_spectrum()} internally. So while \code{break_spectrum()} is an
exported function, it typically does not need to be called directly.
}
\examples{
data(polarized_spectrum_WR_star)

library(dplyr)

wavelength <- seq(
  from = sci$axDat$crval[1],
  by = sci$axDat$cdelt[1],
  length = sci$axDat$len[1]
) \%>\%
  tibble::as_tibble_col(column_name = "wavelength")

stokes <- as_tibble(sci$imDat) \%>\%
  rename_with(function(.cols) c("I", "Q", "U"))

variances <- as_tibble(var$imDat) \%>\%
  select(1:3) \%>\%
  rename_with(function(.cols) c("I_vars", "Q_vars", "U_vars"))

masks <- as_tibble(bpm$imDat) \%>\%
  rename_with(function(.cols) c("I_mask", "Q_mask", "U_mask"))

df_full <- bind_cols(
  wavelength,
  stokes,
  variances,
  masks
)

df_list <- break_spectrum(df_full)
}
\seealso{
\code{\link[=denoise_spectrum]{denoise_spectrum()}}
}
