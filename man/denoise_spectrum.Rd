% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/denoise_spectrum.R
\name{denoise_spectrum}
\alias{denoise_spectrum}
\title{Denoise a polarized spectrum via quadratic trend filtering}
\usage{
denoise_spectrum(
  wavelength,
  flux,
  variances,
  masks,
  break_at = 10L,
  min_pix_segment = 10L,
  compute_uncertainties = FALSE,
  B = 100L,
  mc_cores = parallel::detectCores() - 4,
  sure_args
)
}
\arguments{
\item{wavelength}{Vector of wavelength measurements.}

\item{flux}{Spectropolarimetric measurements, passed as a 3-column tibble,
data frame, or matrix, with the columns corresponding to the \mjseqn{I},
\mjseqn{Q}, \mjseqn{U} Stokes parameters, respectively.}

\item{variances}{Measurement variances, in a tibble, data frame, or matrix
with dimensions matching those of \code{flux}.}

\item{masks}{Pixel masks, in a tibble, data frame, or matrix
with dimensions matching those of \code{flux}. Nonzero elements flag bad pixels.}

\item{break_at}{The minimum number of consecutively-masked spectral pixels
that will trigger a break in the spectrum. Defaults to \code{break_at = 10}.}

\item{min_pix_segment}{After the segmentation procedure is complete, the
resulting segments are examined to ensure that each is sufficiently long for
a non-trivial/well-defined denoising analysis. In particular, any segment
that has less than \code{min_pix_segment} unmasked spectral pixels is discarded.
Defaults to \code{min_pix_segment = 10}.}

\item{compute_uncertainties}{(Boolean) If \code{TRUE}, then bootstrap ensembles
are created for each denoised spectrum via
\code{\link[trendfiltering:bootstrap_trendfilter]{bootstrap_trendfilter()}}.
Variability bands of any level can then quickly be computed by repeated calls
to \code{\link[=variability_bands]{variability_bands()}} (see examples). Defaults to
\code{compute_uncertainties = FALSE}.}

\item{B}{If \code{compute_uncertainties = TRUE}, the number of bootstrap samples
used to estimate the pointwise variability bands. Defaults to \code{B = 100}.}

\item{mc_cores}{Multi-core computing using the
\code{\link[parallel:parallel-package]{parallel}} package: The number of cores to
utilize. Defaults to the number of cores detected on the machine, minus 4.}

\item{sure_args}{(Optional) A named list of arguments to be passed to
\code{\link[trendfiltering:sure_trendfilter]{sure_trendfilter()}}. The evaluation
grid \code{x_eval} defaults to the observed wavelength grid. The arguments \code{x},
\code{y}, \code{weights}, and \code{k} cannot be overridden.}
}
\value{
An object of class \code{'polarized_spectrum'}. This is a list with the
following elements:
\item{n_segments}{The number of segments the spectrum was broken into by
\code{\link[=break_spectrum]{break_spectrum()}}.}
\item{data}{The original data set, as a list of \code{n_segments} tibbles. Each
tibble contains the observed wavelengths (with the superset of masked
wavelengths removed), the Stokes \mjseqn{I}, \mjseqn{Q}, \mjseqn{U} flux
measurements, and the Stokes \mjseqn{I}, \mjseqn{Q}, \mjseqn{U} flux
measurement variances.}
\item{denoised_signals}{A list of \code{n_segments} tibbles, with each tibble
containing the wavelength evaluation grid for the respective spectrum segment
and all of the denoised signals: \code{I},\code{Q},\code{U},\code{Q_norm},\code{U_norm}.}
\item{ensembles}{If \code{compute_uncertainties = TRUE}, a list of bootstrap
ensembles for the denoised \mjseqn{I}, \mjseqn{Q}, and \mjseqn{U} ensembles,
respectively. Each ensemble is returned as an \mjseqn{n \times B} matrix,
less any columns from post-hoc pruning
(see the
\code{\link[trendfiltering:bootstrap_trendfilter]{bootstrap_trendfilter()}}
documentation).
If \code{compute_uncertainties = FALSE}, this will return \code{NULL}.}
\item{I_analysis_summary}{Technical summary of the denoising analysis of the
\mjseqn{I} Stokes parameter.}
\item{Q_analysis_summary}{Same as above, but for the \mjseqn{Q}
Stokes parameter.}
\item{U_analysis_summary}{Same as above, but for the \mjseqn{U}
Stokes parameter.}
}
\description{
\loadmathjax The \code{denoise_spectrum()} function uses quadratic trend
filtering, tuned by Stein's unbiased risk estimate, to optimally denoise a
polarized spectrum in each of the \mjseqn{I}, \mjseqn{Q}, \mjseqn{U} Stokes
parameters (sometimes alternately denoted \mjseqn{S_0}, \mjseqn{S_1},
\mjseqn{S_2}), which then also leads to estimates for the normalized
(unit-less) Stokes parameters \mjseqn{Q/I} and \mjseqn{U/I}. Setting
\code{compute_uncertainties = TRUE} generates a bootstrap ensemble of denoised
spectra for each Stokes parameter, which allows variability bands to be
computed for each denoised spectrum by then calling
\code{\link[=variability_bands]{variability_bands()}} on the \code{denoise_spectrum()} output.
}
\examples{
# Any SALT Observatory spectrum can be read into R from its FITS file
# using the "FITSio" R package, as below. For convenience, here we've stored
# the `sci`, `var`, and `bpm` data structures for a Wolf-Rayet stellar
# spectrum in an R data file within this package, so we can source them using
# a simple call to `data()`, as below.
\dontrun{
install.packages("FITSio")
path_to_FITS_file <- "<your_local_path_to_the_FITS_file>"
file.name <- "WR006_c1_12345678_stokes.fits"
sci <- FITSio::readFITS(paste0(path_to_FITS_file, file.name), hdu = 1)
var <- FITSio::readFITS(paste0(path_to_FITS_file, file.name), hdu = 2)
bpm <- FITSio::readFITS(paste0(path_to_FITS_file, file.name), hdu = 4)
}

data(polarized_spectrum_WR_star)

library(dplyr)

wavelength <- seq(
  from = sci$axDat$crval[1],
  by = sci$axDat$cdelt[1],
  length = sci$axDat$len[1]
)

flux <- as_tibble(sci$imDat)
variances <- as_tibble(var$imDat) \%>\% select(1:3)
masks <- as_tibble(bpm$imDat)


# Not running the rest to save time during development commits
\dontrun{
spec_denoised <- denoise_spectrum(
  wavelength,
  flux,
  variances,
  masks,
  compute_uncertainties = TRUE
)

bands <- variability_bands(spec_denoised, param = "Q_norm", level = 0.95)
}
}
\references{
\enumerate{
\item{Politsch et al. (2020a).
\href{https://academic.oup.com/mnras/article/492/3/4005/5704413}{
Trend filtering – I. A modern statistical tool for time-domain astronomy and
astronomical spectroscopy}. \emph{MNRAS}, 492(3), p. 4005-4018.} \cr
\item{Politsch et al. (2020b).
\href{https://academic.oup.com/mnras/article/492/3/4019/5704414}{
Trend Filtering – II. Denoising astronomical signals with varying degrees of
smoothness}. \emph{MNRAS}, 492(3), p. 4019-4032.}}
}
\seealso{
\code{\link[=variability_bands]{variability_bands()}}, \code{\link[=break_spectrum]{break_spectrum()}}
}
